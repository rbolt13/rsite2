cex = 1, cex.axis = 1, cex.lab = 1, #character expansion is the point size
# can highlight specific points(make them bigger)
# character expansion for axis : want axis to be bigger
# cex. for labels
col = "firebrick") #color
# as speed increases size increases
obj.size <- seq(0.5,5,length.out = length(cars$speed))
plot(x = cars$speed, y = cars$distance,
xlab = "Speed (mph)",
ylab = "Stopping Distance (ft)",
main = "Speeds and Stopping distance of cars",
type = "p",
lty = 1, lwd = 1,
pch = 16,
cex = obj.size, cex.axis = 1, cex.lab = 1,
col = "firebrick")
# farther the distance the bigger the plot
obj.size <- log(cars$dist)/4
plot(x = cars$speed, y = cars$distance,
xlab = "Speed (mph)",
ylab = "Stopping Distance (ft)",
main = "Speeds and Stopping distance of cars",
type = "p",
lty = 1, lwd = 1,
pch = 16,
cex = obj.size, cex.axis = 1, cex.lab = 1,
col = "firebrick")
col.vec <- rep(c("firebrick","forestgreen","cornflowerblue"),
times=c(sum(cars$speed<10),
sum(cars$speed>=10&cars$speed<17),
sum(cars$speed>=17)))
plot(x = cars$speed, y = cars$distance,
xlab = "Speed (mph)",
ylab = "Stopping Distance (ft)",
main = "Speeds and Stopping distance of cars",
type = "p",
lty = 1, lwd = 1,
pch = 16,
cex = 1, cex.axis = 1, cex.lab = 1,
col = col.vec)
plot(x = cars$speed, y = cars$distance,
xlab = "Speed (mph)",
ylab = "Stopping Distance (ft)",
main = "Speeds and Stopping distance of cars",
type = "p",
lty = 1, lwd = 1,
pch = 16,
cex = 1, cex.axis = 1, cex.lab = 1,
col = col.vec)
legend("topleft", #location, topright, bottom, bottomright (look at help)
#can plot as vector as well within
bty = "n", #n mean no box (daniel thinks box looks clunky)
pch=c(16,16,16),#point type
col=c("firebrick","forestgreen","cornflowerblue"),
legend=c("speed<10","10<=speed<17", "speed>=17"))
par(mfrow=c(1,2),mai=c(1,0.5,0.1,0.1)) # parameters
# modify window showing plot
# mai is internal margins
# mfrow : graphical device of 1 row with two colomns
boxplot(decrease ~ treatment, data = OrchardSprays, col = "cornflowerblue",
log = "y",cex.axis=0.7,cex.lab=0.7,notch=F)
## horizontal=TRUE, switching  y <--> x :
boxplot(decrease ~ treatment, data = OrchardSprays, col = 1:8,
log = "x", horizontal=TRUE,cex.axis=0.7,cex.lab=0.7,notch=F)
par(mfrow=c(1,3),mai=c(0.9,0.4,0.1,0.1))
curve(expr=sin, from=-2*pi, to=2*pi, xname = "t",cex.axis=0.7, cex.lab=0.7)
curve(expr=tan, xname = "t", from=-2*pi, to=2*pi, cex.axis=0.7, cex.lab=0.7)
myfn <- function(t){tan(t)*sin(t)}
curve(expr=myfn, xname = "t", from=-2*pi, to=2*pi, cex.axis=0.7, cex.lab=0.7)
par(mfrow=c(1,2),mai=c(1,0.5,0.1,0.1))
x <- rchisq(1000, df = 4)
hist(x, freq = FALSE, ylim = c(0, 0.2),col="orange",main="")
#hist and curve combined
hist(x, freq = FALSE, ylim = c(0, 0.2),col="orange",main="")
lines(density(x,from=0, to=20), col = "blue3", lty = 1, lwd = 3)
# density : dont caluclulate values of the tail
# ylim : limit of the y axis
par(mai=c(0.1,0.1,0.1,0.1))
pairs(iris[1:3], cex=0.5, cex.labels = 1,cex.axis=0.7,
pch = 21, bg = c("red", "green3", "blue")[unclass(iris$Species)])
#real type of a vector is an integer vector
data(iris)
iris$Species
unclass(iris$Species)
VADeaths
par(mai=c(0.4,0.1,0.4,0.1))
dotchart(VADeaths, bg = "skyblue",
cex=0.7, cex.axis=0.1,
main = "Death Rate VA - 1940")
par(mai=c(0.4,0.1,0.4,0.1))
dotchart(VADeaths, bg = "skyblue",
cex=0.7, cex.axis=0.1,
main = "Death Rate VA - 1940")
#throw in matrix and give one function per line of matrix
par(mfrow=c(1,2),mai=c(0.4,0.4,0.1,0.1))
#mfrow : enter figures by row (can do mfcol as well)
#takes two vectors, and combine every combination of first and second vector
sines <- outer(1:20, 1:4, function(x, y) sin(x / 20 * pi * y))
# matrix with 20 rows and four columns
# fills in from left to right
matplot(sines, pch = 1:4, type = "o", col = rainbow(ncol(sines)),
cex=0.5, cex.axis=0.7)
#rainbow puts as many colors as sines in matrix (which is four)
#type 'o' : is for overlay , could also have something else here
matplot(sines, type = "b", pch = 21:23, col = 2:5, bg = 2:5,
cex=0.5, cex.axis=0.7, main = "")
#pch is plotting character
rainbow(6)
#sines
outer(1:20, 1:4, function(x, y) sin(x / 20 * pi * y))
#good for category data (only a few)
par(mfrow=c(1,1),mai=c(0.9,0.4,1,0.4))
mosaicplot(~ Sex + Age + Survived, data = Titanic, main="",color = TRUE)
nf <- layout(matrix(c(2,0,1,3),ncol=2,nrow=2,byrow = TRUE),
widths=c(3,1), heights=c(1,3),
respect=TRUE)
#sample values from two normal distributions
x <- pmin(3, pmax(-3, stats::rnorm(50))) # 50 standard normal and then put
y <- pmin(3, pmax(-3, stats::rnorm(50))) # b/t -3 and 3 for plotting looks good
#generate and store histograms for x and y
xhist <- hist(x, breaks = seq(-3,3,0.5), plot = FALSE) #storing value of hist
yhist <- hist(y, breaks = seq(-3,3,0.5), plot = FALSE)
top <- max(c(xhist$counts, yhist$counts)) #used to defin. upper limit for hists
xrange <- yrange <- c(-3, 3)
# initializing ranges to use later
par(mar = c(3,3,1,1)) #mar : margins (unsure of order)
plot(x, y, xlim = xrange, ylim = yrange, xlab = "", ylab = "")
#scatter plot in the middle
par(mar = c(0,3,1,1))
barplot(xhist$counts, axes = FALSE, ylim = c(0, top), space = 0)
# azes = FALSE : dont plot the axis
# ylim : 0 to top
#space = 0 : no spaces b/t bars
par(mar = c(3,0,1,1))
barplot(yhist$counts, axes = FALSE, xlim = c(0, top), space = 0, horiz = TRUE)
beam > 11
mean(beam > 11)
sum(beam)
as.integer(beam > 11)
mean(as.integer(beam > 11))
as.integer(beam > 11)
mean(as.integer(beam > 11)
mean(as.integer(beam > 11))
proportion <- mean(as.integer(beam > 11))
print(paste(round(proportion*100,2), "%"))
proportion <- mean(as.integer(beam > 10))
print(paste(round(proportion*100,2), "%"))
proportion <- mean(as.integer(beam > 10))
print(paste(round(proportion*100,2), "%"))
wood.g <- c(.31, .35, .36, .36, .37, .38, .40, .40, .40,
.41, .41, .42, .42, .42, .42, .42, .43, .44,
.45, .46, .46, .47, .48, .48, .48, .51, .54,
.54, .55, .58, .62, .66, .66, .67, .68, .75)
steam(wood.g)
stem(wood.g)
stem(wood.g)
stem(wood.g, scale = 2)
stem(wood.g)
stem(wood.g, scale = -2)
stem(wood.g)
stem(wood.g, scale = 0)
stem(wood.g)
stem(wood.g, scale = 1)
stem(wood.g)
stem(wood.g, scale = 2)
stem(wood.g)
stem(wood.g, scale = 3)
stem(wood.g)
stem(wood.g, scale = 2)
stem(wood.g, scale = 3)
stem(wood.g)
stem(wood.g, scale = 2)
stem(wood.g)
stem(wood.g, scale = 0.5)
stem(wood.g)
stem(wood.g, scale = 0.2)
stem(wood.g)
stem(wood.g, scale = 0.5)
stem(wood.g)
stem(wood.g, scale = 0.5)
stem(wood.g, scale = 2)
stem(wood.g)
stem(wood.g, scale = 2)
stem(wood.g, scale = 0.5)
stem(wood.g, scale = 0.33)
stem(wood.g)
stem(wood.g, scale = 2)
stem(wood.g, scale = 0.5)
stem(wood.g, scale = 1/3)
stem(wood.g)
stem(wood.g, scale = 2)
stem(wood.g, scale = 0.5)
stem(wood.g, scale = 1/2)
stem(wood.g)
stem(wood.g, scale = 2)
stem(wood.g, scale = 0.5)
stem(wood.g, scale = 1/4)
stem(wood.g)
stem(wood.g, scale = 2)
stem(wood.g, scale = 0.5)
stem(wood.g, scale = 1/3)
stem(wood.g)
stem(wood.g, scale = 2)
stem(wood.g, scale = 0.5)
stem(wood.g, scale = 0.1)
stem(wood.g)
stem(wood.g, scale = 0.5)
stem(wood.g, scale = 0.1)
stem(wood.g, scale = 0.1)
stem(wood.g, scale = 0.5)
stem(wood.g)
beam
beam2 <- c(6.1, 5.8, 7.8, 7.1, 7.2, 9.2, 6.6, 8.3, 7.0, 8.3,
7.8, 8.1, 7.4, 8.5, 8.9, 9.8, 9.7, 14.1, 12.6, 11.2)
stem(beam2)
hist(beam2,
col = topo.colors(7),
ylim = c(0,10),
xlab= "Flexural Strength (in MegaPascal)",
main = "Flexural Strngth of Concreate Beams")
abline(v=mean(beam2), col="orange", lwd = 6)
abline(v=median(beam2), col="red", lwd = 8)
hist(beam2,
col = topo.colors(7),
ylim = c(0,15),
xlab= "Flexural Strength (in MegaPascal)",
main = "Flexural Strngth of Concreate Beams")
abline(v=mean(beam2), col="orange", lwd = 6)
abline(v=median(beam2), col="red", lwd = 8)
hist(beam2,
col = topo.colors(7),
ylim = c(0,5),
xlab= "Flexural Strength (in MegaPascal)",
main = "Flexural Strngth of Concreate Beams")
abline(v=mean(beam2), col="orange", lwd = 6)
abline(v=median(beam2), col="red", lwd = 8)
hist(beam2,
col = topo.colors(7),
ylim = c(0,8),
xlab= "Flexural Strength (in MegaPascal)",
main = "Flexural Strngth of Concreate Beams")
abline(v=mean(beam2), col="orange", lwd = 6)
abline(v=median(beam2), col="red", lwd = 8)
hist(beam2,
col = topo.colors(7),
ylim = c(0,7),
xlab= "Flexural Strength (in MegaPascal)",
main = "Flexural Strngth of Concreate Beams")
abline(v=mean(beam2), col="orange", lwd = 6)
abline(v=median(beam2), col="red", lwd = 8)
hist(beam2,
col = topo.colors(7),
ylim = c(0,6),
xlab= "Flexural Strength (in MegaPascal)",
main = "Flexural Strngth of Concreate Beams")
abline(v=mean(beam2), col="orange", lwd = 6)
abline(v=median(beam2), col="red", lwd = 8)
hist(beam2,
col = topo.colors(7),
ylim = c(0,6),
xlim = c(0, 15)
xlab= "Flexural Strength (in MegaPascal)",
hist(beam2,
col = topo.colors(7),
ylim = c(0,6),
xlim = c(0, 15),
xlab= "Flexural Strength (in MegaPascal)",
main = "Flexural Strngth of Concreate Beams")
abline(v=mean(beam2), col="orange", lwd = 6)
abline(v=median(beam2), col="red", lwd = 8)
sort(table(beam2))
hist(beam2,
col = topo.colors(7),
ylim = c(0,6),
xlim = c(0, 15),
xlab= "Flexural Strength (in MegaPascal)",
main = "Flexural Strngth of Concreate Beams")
abline(v=mean(beam2), col="orange", lwd = 6)
abline(v=median(beam2), col="red", lwd = 8)
sort(table(beam2))
hist(beam2,
col = topo.colors(7),
ylim = c(0,6),
xlim = c(0, 15),
xlab= "Flexural Strength (in MegaPascal)",
main = "Flexural Strngth of Concreate Beams")
abline(v=mean(beam2), col="orange", lwd = 6)
abline(v=median(beam2), col="red", lwd = 8)
abline(v=8.05, col="yellow", lwd = 6)
z <- sort(table(beam2))
z <- z >2
hist(beam2,
col = topo.colors(7),
ylim = c(0,6),
xlim = c(0, 15),
xlab= "Flexural Strength (in MegaPascal)",
main = "Flexural Strngth of Concreate Beams")
abline(v=mean(beam2), col="orange", lwd = 6)
abline(v=median(beam2), col="red", lwd = 8)
abline(v=8.05, col="yellow", lwd = 6)
z <- sort(table(beam2))
z <- z >2
z
hist(beam2,
col = topo.colors(7),
ylim = c(0,6),
xlim = c(0, 15),
xlab= "Flexural Strength (in MegaPascal)",
main = "Flexural Strngth of Concreate Beams")
abline(v=mean(beam2), col="orange", lwd = 6)
abline(v=median(beam2), col="red", lwd = 8)
abline(v=8.05, col="yellow", lwd = 6)
sort(table(beam2))
hist(beam2,
col = topo.colors(7),
ylim = c(0,6),
xlim = c(0, 15),
xlab= "Flexural Strength (in MegaPascal)",
main = "Flexural Strngth of Concreate Beams")
abline(v=mean(beam2), col="orange", lwd = 6)
abline(v=median(beam2), col="red", lwd = 8)
abline(v=8.05, col="yellow", lwd = 6)
# find mode
sort(table(beam2))
mode <- (8.3-7.8)+7.3
hist(beam2,
col = topo.colors(7),
ylim = c(0,6),
xlim = c(0, 15),
xlab= "Flexural Strength (in MegaPascal)",
main = "Flexural Strngth of Concreate Beams")
abline(v=mean(beam2), col="orange", lwd = 6)
abline(v=median(beam2), col="red", lwd = 8)
abline(v=8.05, col="yellow", lwd = 6)
# find mode
sort(table(beam2))
mode <- ((8.3-7.8)/2)+7.3
hist(beam2,
col = topo.colors(7),
ylim = c(0,6),
xlim = c(0, 15),
xlab= "Flexural Strength (in MegaPascal)",
main = "Flexural Strngth of Concreate Beams")
abline(v=mean(beam2), col="orange", lwd = 6)
abline(v=median(beam2), col="red", lwd = 8)
abline(v=8.05, col="yellow", lwd = 6)
# find mode
sort(table(beam2))
mode <- ((8.3-7.8)/2)+7.3
hist(beam2,
col = topo.colors(7),
ylim = c(0,6),
xlim = c(0, 15),
xlab= "Flexural Strength (in MegaPascal)",
main = "Flexural Strngth of Concreate Beams")
abline(v=mean(beam2), col="orange", lwd = 6)
abline(v=median(beam2), col="red", lwd = 8)
abline(v=8.05, col="yellow", lwd = 6)
8.3-7.8
0.5/2
# find mode
sort(table(beam2))
mode <- ((8.3-7.8)/2)+7.8
hist(beam2,
col = topo.colors(7),
ylim = c(0,6),
xlim = c(0, 15),
xlab= "Flexural Strength (in MegaPascal)",
main = "Flexural Strngth of Concreate Beams")
abline(v=mean(beam2), col="orange", lwd = 6)
abline(v=median(beam2), col="red", lwd = 8)
abline(v=8.05, col="yellow", lwd = 6)
# find mode
sort(table(beam2))
mode <- ((8.3-7.8)/2)+7.8
hist(beam2,
col = topo.colors(7),
ylim = c(0,6),
xlim = c(0, 15),
xlab= "Flexural Strength (in MegaPascal)",
main = "Flexural Strngth of Concreate Beams")
abline(v=mean(beam2), col="orange", lwd = 6)
abline(v=median(beam2), col="red", lwd = 8)
abline(v=mode, col="yellow", lwd = 6)
beam2 <- c(6.1, 5.8, 7.8, 7.1, 7.2, 9.2, 6.6, 8.3, 7.0, 8.3,
7.8, 8.1, 7.4, 8.5, 8.9, 9.8, 9.7)
stem(beam2)
# find mode
sort(table(beam2))
mode <- ((8.3-7.8)/2)+7.8
hist(beam2,
col = topo.colors(7),
ylim = c(0,6),
xlim = c(0, 15),
xlab= "Flexural Strength (in MegaPascal)",
main = "Flexural Strngth of Concreate Beams")
abline(v=mean(beam2), col="orange", lwd = 6)
abline(v=median(beam2), col="red", lwd = 8)
abline(v=mode, col="yellow", lwd = 6)
beam2 <- c(6.1, 5.8, 7.8, 7.1, 7.2, 9.2, 6.6, 8.3, 7.0, 8.3,
7.8, 8.1, 7.4, 8.5, 8.9, 9.8, 9.7, 14.1, 12.6, 11.2)
stem(beam2)
library(dplyr)
library(magrittr)
library(dplyr)
beam.clean <- beam2 %>%
filter(-c(11.2, 14.1,12.6))
beam.clean <- beam2 %>%
select(-c(11.2, 14.1,12.6))
beam.clean <- c(6.1, 5.8, 7.8, 7.1, 7.2, 9.2, 6.6, 8.3, 7.0, 8.3,
7.8, 8.1, 7.4, 8.5, 8.9, 9.8, 9.7)
hist(beam.clean,
col = topo.colors(7),
ylim = c(0,6),
xlim = c(0, 15),
xlab= "Flexural Strength (in MegaPascal)",
main = "Flexural Strngth of Concreate Beams")
abline(v=mean(beam.clean), col="orange", lwd = 6)
abline(v=median(beam.clean), col="red", lwd = 8)
beam.clean <- c(6.1, 5.8, 7.8, 7.1, 7.2, 9.2, 6.6, 8.3, 7.0, 8.3,
7.8, 8.1, 7.4, 8.5, 8.9, 9.8, 9.7)
hist(beam.clean,
col = topo.colors(7),
ylim = c(0,6),
xlim = c(0, 15),
xlab= "Flexural Strength (in MegaPascal)",
main = "Flexural Strngth of Concreate Beams")
abline(v=mean(beam.clean), col="orange", lwd = 6)
abline(v=median(beam.clean), col="red", lwd = 8)
mean(beam.clean)
median(beam.clean)
beam.clean <- c(6.1, 5.8, 7.8, 7.1, 7.2, 9.2, 6.6, 8.3, 7.0, 8.3,
7.8, 8.1, 7.4, 8.5, 8.9, 9.8, 9.7)
beam.clean
mode
mean(beam.clean)
median(beam.clean)
proportion <- mean(as.integer(beam > 10))
print(paste(round(proportion*100,2), "%"))
proportion2 <- mean(as.integer(beam2 > 10))
print(paste(round(proportion2*100,2), "%"))
proportion2 <- mean(as.integer(beam2 > 10))
print(paste(round(proportion2*100,2), "%"))
urls <- c("https://rbolt13.github.io/rsite2/rsite2.html",
"https://rbolt13.github.io/rsite2/ballet.html",
"https://rbolt13.github.io/rsite2/stat451.html",
"https://rbolt13.github.io/rsite2/contact.html")
x <- data.frame("Page" = c("Website Tutorial",
"Music and Ballet",
"STAT-451",
"Contact"),
"Description" = c("Here I describe the processes that go into making a  website (like this one) using rstudio and github.",
"Stat-451 projects, coming soon.",
"Here you can find a short about me, my eamil address, and links to other projects I've worked on during my undergrad."))
urls <- c("https://rbolt13.github.io/rsite2/rsite2.html",
"https://rbolt13.github.io/rsite2/ballet.html",
"https://rbolt13.github.io/rsite2/stat451.html",
"https://rbolt13.github.io/rsite2/contact.html")
x <- data.frame("Page" = c("Website Tutorial",
"Music and Ballet",
"STAT-451",
"Contact"),
"Description" = c("Here I describe the processes that go into making a  website (like this one) using rstudio and github.",
"This is a case study on ballet music, using the spotifyr package."
"Stat-451 projects, coming soon.",
urls <- c("https://rbolt13.github.io/rsite2/rsite2.html",
"https://rbolt13.github.io/rsite2/ballet.html",
"https://rbolt13.github.io/rsite2/stat451.html",
"https://rbolt13.github.io/rsite2/contact.html")
x <- data.frame("Page" = c("Website Tutorial",
"Music and Ballet",
"STAT-451",
"Contact"),
"Description" = c("Here I describe the processes that go into making a  website (like this one) using rstudio and github.",
"This is a case study on ballet music, using the spotifyr package.",
"Stat-451 projects, coming soon.",
"Here you can find a short about me, my eamil address, and links to other projects I've worked on during my undergrad."))
x$Page <- paste0("[", x$Page, "](", urls, ")")
kable(x) %>%
kable_paper("hover", full_width = F)
library(dplyr)
library(kableExtra) # highlights table when hover over a line
urls <- c("https://rbolt13.github.io/rsite2/rsite2.html",
"https://rbolt13.github.io/rsite2/ballet.html",
"https://rbolt13.github.io/rsite2/stat451.html",
"https://rbolt13.github.io/rsite2/contact.html")
x <- data.frame("Page" = c("Website Tutorial",
"Music and Ballet",
"STAT-451",
"Contact"),
"Description" = c("Here I describe the processes that go into making a  website (like this one) using rstudio and github.",
"This is a case study on ballet music, using the spotifyr package.",
"Stat-451 projects, coming soon.",
"Here you can find a short about me, my eamil address, and links to other projects I've worked on during my undergrad."))
x$Page <- paste0("[", x$Page, "](", urls, ")")
kable(x) %>%
kable_paper("hover", full_width = F)
urls <- c("https://rbolt13.github.io/rsite2/rsite2.html",
"https://rbolt13.github.io/rsite2/ballet.html",
"https://rbolt13.github.io/rsite2/stat451.html",
"https://rbolt13.github.io/rsite2/contact.html")
x <- data.frame("Page" = c("Website Tutorial",
"Music and Ballet",
"STAT-451",
"Contact"),
"Description" = c("Here I describe the processes that go into making a  website (like this one) using rstudio and github.",
"This is a case study on ballet music, using the spotifyr package.",
"Stat-451 bookwork done using R studio, coming soon.",
"Here you can find a short about me, my eamil address, and links to other projects I've worked on during my undergrad."))
x$Page <- paste0("[", x$Page, "](", urls, ")")
kable(x) %>%
kable_paper("hover", full_width = F)
